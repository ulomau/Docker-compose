# Task- Write a Docker-compose script to deploy Wordpress on GCP compute instance
# Instance is created using Ubuntu 18.04 LTS

# Procedure:

# Step 1
# Create a GCE instance using Ubuntu 18.04 LTS
# SSH into the instance

# Step 2: Install Docker and Docker-compose 
# Run the following commands to update and upgrade the system first:
 "sudo apt-get update" and "sudo apt-get upgrade -y"
# To install Docker, run the command:
 "sudo apt-get install docker.io -y"
# To start Docker, run the command: 
"sudo systemctl start docker"
# To enable Docker, run the command:
 "sudo systemctl enable docker"

# To install Docker-compose, run the command: 
"sudo apt install docker-compose -y"

# Step 3: Install MysQl
# Run the following command to install MariaDB:
 "sudo apt install mariadb-server mariadb-client -y" 
# Run this to secure the installation:
 "sudo mysql_secure_installation"

# Note when it asks to input password for root, press enter and then follow it by creating a password and re-enter the password.
# (Note the password, it will be used later to access MariaDb and also to configure wordpress)
# Enter y for the rest prompt until you see thanks for using MariaDB!

# Step 4:Install PHP
Run the command to install PHP:
 "sudo apt install php php-mysql -y"

# Step 5: Create Database for the Wordpress from the MysQl MariaDB
# Run the following command:
 "sudo mysql -u root -p"

# A prompt will pop up asking for your password, simply put in the password you created when installing MysQl MariaDB above
Run this SQL command inorder to create a database:
" CREATE DATABASE wordpress_db;
CREATE USER 'wp_user'@'localhost' "IDENTIFIED BY 'password';
GRANT ALL ON wordpress_db.* TO 'wp_user'@'localhost' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;
Exit; "
# (Note the username,Database)

# Step 6:
# Create a directory for the wordpress:
 "Sudo mkdir wordpress-dockercompose"
# Cd into the directory:
 "cd wordpress-dockercompose"
"sudo mkdir wordpress"
# Note:These directories will be used as volumes for the installation. 

# Step 7: Create a docker-compose.yml file

To create docker-compose.yml file, open an editor (nano) and write the scripts like below


version: '3.3'

services:
   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "80:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
       WORDPRESS_DB_NAME: wordpress
volumes:
    db_data: {}
    

    # save it and close the editor.
    # (The application verssion is version 3.3, the services i.e the database is wordpress. the docker images used are Wordpress:latest and MySQL 5.7 and then we defined the environments variables) 

    # Step 8: run docker-compose up
    # cd into wordpress-dockercompose
    " cd wordpress-dockercompose"
    # Run this command to get docker up
    " sudo docker-compose up -d"
    # (this command will set up  wordpress with Docker containers and these containers are created using the configured images and will be accesible with the volumes created)
   
    # Step 8:
    #Copy your GCP instance IP address into a bowser and you will see Wordpress installed and waitig for configuration
    # End